--Entity Support -- Need to discuss
  --class inheritance
  --polymorphic associations
  --polymorphic queries


--Abstract entity
  --Same as concrete entities but can not be instanciated
  --queries are also same like concrete entities
  --when you query Abstract entity,the query operates on all the concrete subclasses of Abstract entity
  --Ex:

@Entity
public abstract class Employee {
    @Id
    protected Integer employeeId;
    ...
}
@Entity
public class PermenantEmployee extends Employee {
    protected Integer salary;
    ...
}
@Entity
public class Contracor extends Employee {
    protected Float hourlyWage;
}



--Mapped Superclass
  --entities may inherit from Superclass that contains
    --persistent state
    --mapping information
  --Superclass is not decorated with @Entity annotation
  --Used mostly when state and mapping information is common between multiple entities
  --Mapped Superclass is decorated with @MappedSuperclass annoatation from package java.persistence.MappedSuperclass
  --Ex:
  @MappedSuperclass
  public class User {
      @Id
      protected Integer userId;
      ...
  }
  @Entity
  public class Student extends User {
      protected Integer fees;
      ...
  }
  @Entity
  public class Employee extends User {
      protected Float salary;
      ...
  }


  --Mapped Superclass can not be used in query operations (Entity Manager)
  --We have to use entity subclass of MappedSuperclass
  --Mapped Superclass can not be target of Entity RelationShips
  --Can be abstract or concrete
  --No tables for MappedSuperclass


--Non Entity Superclass
  --Entities can have non entity Superclasses
  --can be absatract or concrete
  --state is not persistent
  --Can not used in Query Operations or Entity Manager
  --Any Mapping or RelationShip operations are ignoared by non Entity
    Superclasses -
--Examples Needed




--Entity Inheritance Mapping Strategy
  --How the Java Persistence Provider map the inherited entities in the underlaying data store
  --Decorate the root class of hireachy with javax.persistence.Inheritance annotation
  --Here are the strategy for Entity Inheritance
    --A Single Table Per class
    --A table per concrete entity class
    --Join strategy
      --Fields/Attributes of Subclass are mapped differently
  --How to configure the mapping Strategy
    --strategy element of @Inheritance
    --javax.persistence.InheritanceType
      --SINGLE_TABEL
      --JOINED
      --TABLE_PER_CLASS
    --The Default Strategy is SINGLE_TABEL if the @Inheritance annotation is not used on the root
      class of the entity hierarchy

  --Single Table per class hierarchy strategy
    --all the classes in the hireachy are mapped to single table in database
    --descriminator column
      --contains the value that identifies the subclass to which the instance
        represented by row belongs
    --descriminator column can be specified using javax.persistence.Discriminator
      annotation on the root of the entity class hierarchy
    --@DescriminatorColumn element
      --name(String)
        -> Name of the column to be used as descriminator Column
        -> The default is DTYPE
        -> The element is optional

      --descriminatorType(DescriminatorType)
        ->type of column to be used as descriminator column
        ->The default is DescriminatorType.STRING
        ->This element is optional

      --columnDefinition(String)
        ->The SQl fragment to use when creating descriminator column
        ->The default is generated by Persistence Provider and is implementation
          specific

      --length(String)
        ->Column length
        ->Default is 31
        ->The element is optional
      --Enum:
      public enum DiscriminatorType {
      STRING,
      CHAR,
      INTEGER
      };

    --The javax.persistence.DescriminatorValue can be used to set the value in the
      descriminator column for each entity in class hierarchy
    --We may decorate only concrete entity class
    --Disadvantages of this strategy
      --requires the columns that contain the state of subclasses to be nullable.

  --The table per concrete class strategy
    --each concrete class is table is Database
    --very poor Support for polymorphic behaviour
    --Not Supported by all JPA providers

  --The joined subclass strategy
    --InheritanceType.JOINED
    --root of the class hierarchy is represented by a single table
    --each subclass has a saperate table that contain the fields specific to subclass
    --subclass table does not contain the value of inherited properties
    --the subclass table has column(s) that represents its primary key which is
      foreign key to the primary key of Superclass table
    --Good polymorphic Support
    --Join Query Required when usin entity subclass
    --performance
    --Some Java Persistence API providers, including the default provider in the
     GlassFish Server, require a discriminator column that corresponds to the root
     entity when using the joined subclass strategy. If you are not using automatic
     table creation in your application, make sure that the database table is set
     up correctly for the discriminator column defaults, or use the
     @DiscriminatorColumn annotation to match your database schema.
